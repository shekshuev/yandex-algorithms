/*
-- РЕШЕНИЕ --
https://contest.yandex.ru/contest/22781/run-report/87513499/

-- ПРИНЦИП РАБОТЫ --
1. Считываются входные данные и передаются функции solveEquation. 
2. Внутри функции solveEquation определяется объект Map operations, 
   который содержит математические функции сложения, вычитания, 
   умножения и деления (с учетом задания, с округлением). Ключами 
   для доступа к методам являются их математическое обозначение 
   (*, +, -, /). Важен порядок операций, второй аргумент всегда 
   на первом месте (для / и -).
3. Входная строка разбивается по пробелам на массив, и в цикле 
   по этому массиву реализуется алгоритм, описанный в задании. 
   Если приходит "операция" (+, -, /, *), то с помощью pop
   вынимаются два элемента из стека и передаются вызванному 
   по ключу методу объекта operations, результат с помощью push 
   помещается обратно. Если же пришло число, оно просто помещается в стек.
4. В конце в стеке остается только один элемент, он и является решением.


-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
Считаю, что доказательство корректности приведено описании задания.
Для корректной работы необходимо, чтобы входная строка была
корректно записана.

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
Входными данными выступает строка длинной n. Сначала она разбивается 
по пробелам, для этого ее необходимо прочитать хотя бы раз, это O(n). 
Далее программа циклом проходит по массиву, это O(n/2), так как 
без пробелов. Часть элементов либо помещается в стек, либо забирается 
оттуда. В качестве стека используется массив, изначально пустой. 
При добавлении в конец необходимо выделить место. Полагаю, что 
разработчики nodejs и v8 реализовали массивы так, чтобы добавление 
в конец было близко к O(1). Таким образом, временная сложность 
примерно O(n).

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
В памяти содержится стек, в котором элементов может быть не более 
O(n/2) (без пробелов), значит, без учета констант, сложность O(n).
*/
const readline = require("readline");
const fs = require("fs");

readline
    .createInterface({
        input: fs.createReadStream("input.txt"),
    })
    .on("line", line => {
        solveEquation(line);
    });

function solveEquation(line) {
    const operands = [];

    const operations = new Map();
    operations.set("*", (a, b) => b * a);
    operations.set("/", (a, b) => Math.floor(b / a));
    operations.set("+", (a, b) => b + a);
    operations.set("-", (a, b) => b - a);

    for (const elem of line.split(/\s/)) {
        if (operations.has(elem)) {
            operands.push(operations.get(elem)(operands.pop(), operands.pop()));
        } else {
            operands.push(parseInt(elem, 10));
        }
    }

    console.log(operands.pop());
}

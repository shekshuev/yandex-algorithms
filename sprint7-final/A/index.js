/*
-- РЕШЕНИЕ --
https://contest.yandex.ru/contest/25597/run-report/89426285/
-- ДИСКЛЕЙМЕР --
В качестве основы для решения взял эту статью 
https://habr.com/ru/articles/676858/, а также решение задачи
K. Гороскопы (https://contest.yandex.ru/contest/25596/problems/K/).
Расстояние Левенштейна получается обратная задача к нахождению
обшей последовательности.

-- ПРИНЦИП РАБОТЫ --
Реализован Алгоритм Вагнера-Фишера, который использует реккурентную
формулу для заполнения матрицы для вычисления расстояния
(https://ru.wikipedia.org/wiki/Расстояние_Левенштейна).


-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
Метод математической индукции.
Пусть имеются две строки first длины n и second длины m.

База индукции: 
1. При i = 0 => dp[i][j] = j, 0 <= j <= m
2. При j = 0 => dp[i][j] = i, 0 <= i <= n
Если одна строка пуста, то чтобы превратить ее в другую 
строку длины k, необходимо сделать k действий.


Шаг индукции: 
Предположим, что для всех i < n и j < m значение dp[i][j] 
было правильно рассчитано. Необходимо доказать, что значение 
dp[i][j] также будет правильным. 

1. first[i-1] === second[j-1]: 
   В этом случае символы совпадают, dp[i][j] = dp[i-1][j-1], 
   что соответствует минимальному расстоянию между 
   first[0...i-1] и second[0...j-1].
2. str1[i-1] !== str2[j-1]:
   Символы не совпадают, необходима редакционная операция:
      dp[i-1][j] + 1:
         расстояние между first[0...i-2] и second[0...j-1] 
         плюс удаление first[i-1].
      dp[i][j-1] + 1:
         расстояние между str1[0...i-1] и str2[0...j-2] 
         плюс вставка символа second[j-1] после first[i-1].
      dp[i-1][j-1] + 1: 
         расстояние между str1[0...i-2] и str2[0...j-2] 
         плюс замена символа first[i-1] на second[j-1].
   Утверждение справедливо для всех i > 0, j > 0. 

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
Для считывания входных данных необходимо O(m + n) времени.
Изменение значения элемента матрицы происходит за константное
время. Для того, чтобы пройти всю матрицу, необходимо
O(n * m). Итоговая временная сложность O(n * m).


-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
Для хранения входных данных необходимо O(m + n) памяти.
Для хранения матрицы необходимо O(m * n) памяти. Итоговая 
пространственная сложность O(n * m).
*/
const readline = require("readline");
const fs = require("fs");
const path = require("path");

let currentLine = 0;
const input = [];

readline
    .createInterface({
        input: fs.createReadStream(path.join(__dirname, "input.txt"))
    })
    .on("line", line => {
        input.push(line);
        currentLine++;
    })
    .on("close", () => solve(input));

function solve([first, second]) {
    const n = first?.length || 0;
    const m = second?.length || 0;
    const dp = Array.from(Array(n + 1), () => new Array(m + 1).fill(0));

    for (let i = 1; i <= n; i++) {
        dp[i][0] = i;
    }
    for (let j = 1; j <= m; j++) {
        dp[0][j] = j;
    }

    for (let i = 1; i <= n; i++) {
        for (let j = 1; j <= m; j++) {
            dp[i][j] = Math.min(
                dp[i][j - 1] + 1,
                dp[i - 1][j] + 1,

                dp[i - 1][j - 1] + Number(first[i - 1] !== second[j - 1])
            );
        }
    }
    console.log(dp[n][m]);
}
